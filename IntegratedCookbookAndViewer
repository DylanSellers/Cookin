<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Recipe Collection</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      margin: 0;
      padding: 0;
      height: 100vh;
      overflow: hidden;
    }
    #sidebar, #content {
      box-sizing: border-box;
    }

    #sidebar {
      flex-shrink: 0;
      width: 25%;
      max-width: 300px;
      background-color: #f8f8f8;
      border-right: 1px solid #ccc;
      padding: 10px;
      overflow-y: auto;
    }
    #content {
      flex-grow: 1;
      min-width: 0;
      max-width: 100%;
      padding: 20px;
      overflow-y: auto;
      word-wrap: break-word;
      overflow-wrap: break-word;
      box-sizing: border-box;
    }
    .book, .chapter {
      margin: 10px 0;
      cursor: pointer;
    }
    .chapters, .recipes {
      margin-left: 20px;
      display: none;
    }
    .recipe {
      margin-left: 20px;
      cursor: pointer;
    }
    h1 { font-size: 26px; margin-bottom: 5px; }
    p { font-size: 16px; text-align: justify; }
    .italic { font-style: italic; }
    .bold { font-weight: bold; margin: 15px 0; }
    .right-align { text-align: right; }
    .download-btn {
  display: block;
  margin-left: auto;
  margin-right: 0;
  margin-bottom: 10px;
  padding: 6px 10px;
  font-size: 14px;
}
    .print-wrapper {
  width: 595pt;
  display: flex;
  justify-content: center;
}

#printArea {
      width: 515pt;
      margin: 0 auto;
      word-wrap: break-word;
      overflow-wrap: break-word;
      font-size:  12pt;
    }
    @media print {
    .download-btn {
      display: none !important;
    }
  }
</style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
</head>
<body>
  <div id="sidebar">
    <div class="book" onclick="toggleVisibility('book1-chapters')">Kenâ€™s Recipes</div>
    <div id="book1-chapters" class="chapters"><p>Loading chapters...</p></div>
    <div class="book" onclick="toggleVisibility('book2-chapters')">Sellers Family Cookbook</div>
    <div id="book2-chapters" class="chapters"><p>Chapters not yet implemented.</p></div>
  </div>
  <div id="content">
    <h1>Welcome to the Recipe Collection</h1>
    <p>Select a book, chapter, and recipe to view details here.</p>
  </div>

  <script>
    let currentRecipeName = "recipe";

    async function fetchChapters(bookFolder, bookId) {
      const apiUrl = `https://api.github.com/repos/MelissaSellers/Test/contents/${bookFolder}`;
      const chaptersElement = document.getElementById(bookId);
      try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
          let errorText;
          try {
            errorText = await response.text();
          } catch (e) {
            errorText = 'Unable to read error message.';
          }
          throw new Error(`Failed to fetch chapters: ${response.status} ${response.statusText} - ${errorText}`);
        }
        const folders = await response.json();
        chaptersElement.innerHTML = '';

        folders.forEach(folder => {
          if (folder.type === 'dir') {
            const chapterId = `${bookId}-${folder.name.replace(/\s+/g, '-')}`;
            chaptersElement.innerHTML += `
              <div class="chapter" onclick="toggleVisibility('${chapterId}')">${folder.name}</div>
              <div id="${chapterId}" class="recipes"></div>
            `;
            fetchRecipes(folder.path, chapterId);
          }
        });
      } catch (error) {
        console.error('Error loading chapters:', error);
        let message = `<p><strong>Error loading chapters.</strong></p>`;
        if (error && error.message) {
          message += `<p style='color: gray;'>Details: ${error.message}</p>`;
        }
        chaptersElement.innerHTML = message;
      }
    }

    async function fetchRecipes(chapterPath, chapterId) {
      const apiUrl = `https://api.github.com/repos/MelissaSellers/Test/contents/${chapterPath}`;
      try {
        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error(`Failed to fetch recipes: ${response.statusText}`);
        const files = await response.json();
        const recipesElement = document.getElementById(chapterId);
        recipesElement.innerHTML = '';

        files.forEach(file => {
          if (file.type === 'file' && file.name.endsWith('.json')) {
            recipesElement.innerHTML += `
              <div class="recipe">
                <a href="#" onclick="event.preventDefault(); loadRecipe('${file.path.replace(/'/g, "\\'")}')">
                  ${file.name.replace('.json', '')}
                </a>
              </div>
            `;
          }
        });
      } catch (error) {
        console.error(error);
        document.getElementById(chapterId).innerHTML = `<p>Error loading recipes</p>`;
      }
    }

    function loadRecipe(filePath) {
      const url = `https://raw.githubusercontent.com/MelissaSellers/Test/main/${filePath}`;
      document.getElementById('content').innerHTML = '<p>Loading recipe...</p>';
      fetch(url)
        .then(res => {
          if (!res.ok) throw new Error(`Failed to fetch recipe: ${res.status} ${res.statusText}`);
          return res.json();
        })
        .then(data => renderRecipe(data))
        .catch(err => {
          document.getElementById("content").textContent = "Error: " + err.message;
          console.error("Fetch error:", err);
        });
    }

    function renderRecipe(data) {
      const { recipeName, recipeDescription, servingSize, ingredientList, recipeText } = data;
      currentRecipeName = recipeName || "recipe";
      const output = document.getElementById("content");
      output.innerHTML = '';

      const downloadBtn = document.createElement("button");
      downloadBtn.textContent = "Download PDF";
      downloadBtn.className = "download-btn";
      downloadBtn.onclick = printRecipe;

      const container = document.createElement("div");
      container.id = "printArea";
      container.className = "print-section";
      container.style.fontSize = '12pt';

      const h1 = document.createElement("h1");
      h1.textContent = recipeName || "Untitled Recipe";

      const hr = document.createElement("hr");

      const serving = document.createElement("p");
      if (servingSize) {
        serving.textContent = `Serves: ${servingSize}`;
        serving.className = "right-align";
      }

      const desc = document.createElement("p");
      if (recipeDescription) {
        desc.innerHTML = recipeDescription.replace(/\n/g, "<br>");
        desc.className = "italic";
      }

      const ingredientsHeader = document.createElement("p");
      ingredientsHeader.textContent = "Ingredients:";
      ingredientsHeader.className = "bold";

      const ingredients = document.createElement("p");
      if (ingredientList) {
        const indented = ingredientList.split('\n').map(line => `&emsp;${line}`).join('<br>');
        ingredients.innerHTML = indented;
      }

      const directionsHeader = document.createElement("p");
      directionsHeader.textContent = "Directions:";
      directionsHeader.className = "bold";

      const instructions = document.createElement("p");
      if (recipeText) {
        instructions.innerHTML = recipeText.replace(/\n/g, "<br>");
      }

      container.appendChild(h1);
      container.appendChild(hr);
      if (servingSize) container.appendChild(serving);
      if (recipeDescription) container.appendChild(desc);
      if (ingredientList) {
        container.appendChild(ingredientsHeader);
        container.appendChild(ingredients);
      }
      if (recipeText) {
        container.appendChild(directionsHeader);
        container.appendChild(instructions);
      }

      const wrapper = document.createElement("div");
      wrapper.className = "print-wrapper";
      wrapper.appendChild(container);

      output.appendChild(downloadBtn);
      output.appendChild(wrapper);
    }

    async function printRecipe(e) {
      e.preventDefault();
      const { jsPDF } = window.jspdf;
      const element = document.getElementById("printArea");
      const pdf = new jsPDF({ unit: 'pt', format: 'a4' });

      await pdf.html(element, {
        callback: function (doc) {
          const blob = doc.output("blob");
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = `${currentRecipeName.replace(/\s+/g, '_')}.pdf`;
          a.style.display = "none";
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        },
        x: 40,
        y: 40,
        width: 515,
        windowWidth: 700,
        html2canvas: {
          scale: 0.6,
          useCORS: true
        }
      });
    }

    function toggleVisibility(elementId) {
      const element = document.getElementById(elementId);
      const siblingElements = Array.from(element.parentElement.children).filter(el => el !== element);

      siblingElements.forEach(sibling => {
        if (sibling.classList.contains('chapters') || sibling.classList.contains('recipes')) {
          sibling.style.display = 'none';
        }
      });

      element.style.display = element.style.display === 'block' ? 'none' : 'block';
    }

    window.onload = () => {
      fetchChapters("2021-02-22_Ken's Recipes", 'book1-chapters');
    };
  </script>
</body>
</html>

